class bullet
{
	var mesh_bullet;
	var obj_bullet;
	var pos;
	var dir;
	var color;
	var speed;
	var isflying;
	init(p,d,c);
	update();
	draw();
	shoot(p,d);
};

function bullet::init(p,d,c)
{
	isflying = false;
	pos = p;
	dir = d;
	color = c;
	mesh_bullet = CVmNewMesh(VRP_BOX);
	mesh_bullet.Scale(0.1);
	mesh_bullet.ModulateMaterials(color);
	obj_bullet = CVmObj(mesh_bullet);
	obj_bullet.SetPosition(p);
	speed = BULLET_SPEED;
}

function bullet::shoot(p,d)
{
	isflying = true;
	pos = p + [0,1,0];
	dir = d;
}

function bullet::draw()
{
	if (isflying)
		obj_bullet.Draw();
}

function bullet::update()
{
	if (isflying)
	{
		pos += dir * speed;
		obj_bullet.SetPosition(pos);
	}
}




class player
{
	var mesh_player_lower;
	var mesh_player_upper;
	var obj_player_lower;
	var obj_player_upper;
	var obj_player;
	var position;
	var direction;
	var angleY;
	var current_frame;
	var id;
	var color;
	var mybullet;
	var fx_shoot;
	
	init(i,c,p);
	draw();
	update(matrix_level);
	shoot();
};

function player::init(i,c,p)
{
	id = i;
	color = c;
	fx_shoot = CVmVRAWav("shoot.wav",true);
	//mesh_player = CVmNewMesh(VRP_CONE);
	//mesh_player.Rotate(90,[1,0,0]);
	//obj_player = CVmObj(mesh_player);
	mesh_player_lower = CVmNewMesh("swat_lower.aam");	
	mesh_player_upper = CVmNewMesh("swat_upper.aam");
	mesh_player_lower.ModulateMaterials(color);
	mesh_player_upper.ModulateMaterials(color);
	var sf1 = mesh_player_lower.Normalize(1);
	mesh_player_upper.Scale(sf1);
	
	obj_player_lower = CVmObj(mesh_player_lower);
	obj_player_upper = CVmObj(mesh_player_upper);
	obj_player = CVmObj();
	obj_player.AddChild(obj_player_lower);
	obj_player.AddChild(obj_player_upper);
	
	position = p;
	obj_player.SetPosition(position);
	angleY = 0;
	direction = [ sin (angleY), 0 , cos(angleY)];
	
	current_frame = 0;
	
	mybullet = bullet();
	mybullet.init(position,direction,color); 
}

function player::shoot()
{
	mybullet.shoot(position,direction);
	fx_shoot.SetPosition(position);
	fx_shoot.SetListenerPosition(CameraGetPosition());
	fx_shoot.SetListenerOrientation(-CameraGetDirection());
	fx_shoot.Play();
}

function player::update(matrix_level)
{
	var oldposition = position;
	
	var run = 1;
	if (Keypressed(VK_SHIFT))
		run = 2;
		
	if (Keypressed(VK_LEFT))
		angleY += PLAYER_ANGLE_STEP;
	if (Keypressed(VK_RIGHT))
		angleY -= PLAYER_ANGLE_STEP;
		
	direction = [ sin (angleY), 0 , cos(angleY)];
	
	if (Keypressed(VK_UP))
	{
		position += (PLAYER_SPEED * direction * run);
		current_frame = (current_frame + 0.25 * run) % SWAT_TOTAL_FRAMES;
	}
	if (Keypressed(VK_DOWN))
	{
		position -= (PLAYER_SPEED * direction * run);
		current_frame = (current_frame - 0.25 * run) % SWAT_TOTAL_FRAMES;
		if (current_frame <= 0)
			current_frame += SWAT_TOTAL_FRAMES;
	}
	
	var intx = int(position.x);
	var intz = int(position.z);
	if (matrix_level[intz][intx] == 1)
		position = oldposition;			
				
	obj_player.SetPosition(position);
	obj_player.SetRotation(RAD_TO_GRAD*angleY, [0,1,0]);	
	
	if (keypressed(VK_SPACE))
		shoot();
	
	mybullet.update();
}

function player::draw()
{
	obj_player.Draw(VR_FRAMENUMBER, SWAT_START_WALK + current_frame);
	mybullet.draw();
}

